// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { toast } from 'sonner';
import type { Database } from './types';

const SUPABASE_URL = "https://juwbamkqkawyibcvllvo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp1d2JhbWtxa2F3eWliY3ZsbHZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE3MDUxMDIsImV4cCI6MjA1NzI4MTEwMn0.uqwyR5lwp8JXa7qAZu6nZcCEdaoKOxX0XxQls2vg7Fk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    headers: { 'x-application-name': 'automatizalo' },
  },
  db: {
    schema: 'public',
  },
  // Enhanced connection settings with increased timeouts
  realtime: {
    params: {
      eventsPerSecond: 5,
    },
  },
});

// Add initialization logging
console.log("Supabase client initialized with URL:", SUPABASE_URL);

// More robust connection test with multiple retries
let connectionAttempts = 0;
const maxConnectionAttempts = 5;

const testConnection = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      throw error;
    }
    
    console.log("Supabase connection successful. Session:", data.session ? "Active" : "None");
    return true;
  } catch (err: any) {
    connectionAttempts++;
    console.error(`Supabase connection error (attempt ${connectionAttempts}/${maxConnectionAttempts}):`, err.message);
    
    if (connectionAttempts < maxConnectionAttempts) {
      console.log(`Retrying connection in ${connectionAttempts * 2} seconds...`);
      setTimeout(testConnection, connectionAttempts * 2000);
    } else {
      toast.error("Database connection issues detected. Some features may be limited.");
      console.error("Supabase connection failed after maximum attempts:", err);
    }
    
    return false;
  }
};

// Run the connection test on initialization
testConnection();

// Add a helper function to handle Supabase errors consistently
export const handleSupabaseError = (error: any, defaultMessage: string = "An error occurred"): string => {
  if (!error) {
    return defaultMessage;
  }
  
  console.error("Supabase error:", error);
  
  // Handle specific error codes
  if (error?.code === "42501" || error?.message?.includes("permission denied")) {
    return "Database permission error. The application will continue to function with limited features.";
  }
  
  if (error?.code === "42P07") {
    return "Database structure error. Please contact the administrator.";
  }
  
  if (error?.code === "PGRST116") {
    return "No data found. Using default values.";
  }
  
  if (error?.message?.includes("JWT")) {
    return "Authentication error. Please try logging out and back in.";
  }
  
  if (error?.message?.includes("network") || error?.code === "NETWORK_ERROR" || error?.message?.includes("fetch")) {
    return "Network error connecting to database. Please check your connection.";
  }
  
  return error?.message || defaultMessage;
};

// Add a function to retry failed Supabase operations with exponential backoff
export const retryOperation = async <T>(
  operation: () => Promise<T>,
  maxRetries: number = 5,
  initialDelay: number = 1000,
): Promise<T> => {
  let lastError: any;
  let delay = initialDelay;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error;
      console.log(`Operation failed (attempt ${attempt}/${maxRetries}). Retrying in ${delay}ms...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      // Exponential backoff with random jitter for next attempt
      delay = Math.min(delay * 1.5 + Math.random() * 1000, 10000);
    }
  }
  
  throw lastError;
};

// Try to update localStorage when we're online again
window.addEventListener('online', () => {
  console.log('Network connection restored. Attempting to refresh data...');
  toast.success("Network connection restored. Refreshing data...");
  
  // Dispatch custom event that services can listen for
  window.dispatchEvent(new CustomEvent('networkReconnected'));
});

// Notify when we're offline
window.addEventListener('offline', () => {
  console.log('Network connection lost. Using cached data...');
  toast.warning("Network connection lost. Using cached data where available.");
});
