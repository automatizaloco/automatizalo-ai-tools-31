
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { sendPostToN8N, processAndSaveWebhookResponse } from "@/services/blog/writeBlogPosts";
import { toast } from "sonner";
import { Progress } from "@/components/ui/progress";
import { NewBlogPost } from "@/types/blog";
import { useIsMobile } from "@/hooks/use-mobile";
import { useWebhookStore } from "@/stores/webhookStore";
import { usePersistentToast } from "@/context/PersistentToastContext";
import AdminBaseLayout from "./layout/AdminBaseLayout";

const AutomaticBlog = () => {
  const navigate = useNavigate();
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [error, setError] = useState("");
  const isMobile = useIsMobile();
  const webhookUrl = useWebhookStore(state => state.getActiveBlogCreationUrl());
  const persistentToast = usePersistentToast();

  // Listen for form submissions from the embedded form
  React.useEffect(() => {
    const handleFormSubmission = async (event: MessageEvent) => {
      // Check if the message is from our form
      if (event.origin !== 'https://automatizalo-n8n.v4zcph.easypanel.host') {
        return;
      }

      // Check if it's a form submission event
      if (event.data && event.data.type === 'form-submit') {
        const formData = event.data.data;
        
        if (!formData.title) {
          toast.error("Please enter a title");
          return;
        }

        setIsLoading(true);
        setError("");
        
        // Simulate progress for better UX
        const progressInterval = setInterval(() => {
          setProgress(prev => {
            if (prev >= 90) {
              clearInterval(progressInterval);
              return 90;
            }
            return prev + 10;
          });
        }, 300);

        try {
          // Prepare data for the webhook
          const slug = formData.title.toLowerCase().replace(/[^\w\s]/gi, '').replace(/\s+/g, '-');
          const blogPostData: NewBlogPost = {
            title: formData.title,
            slug: slug,
            excerpt: "", // Will be generated by the webhook
            content: "", // Will be generated by the webhook
            category: "Automatic",
            tags: ["automatic", "ai-generated"],
            author: "AI Assistant",
            date: new Date().toISOString().split('T')[0],
            readTime: "3 min",
            image: "https://via.placeholder.com/800x400",
            featured: false,
            status: 'draft', // Set as draft by default
            url: formData.url || "",
          };

          console.log("Sending data to webhook:", blogPostData);
          
          // Add persistent toast for tracking
          persistentToast.addToast({
            type: "info",
            title: "Blog Post Generation Started",
            message: `Title: ${formData.title}`,
          });

          // Send to webhook and get response
          const responseText = await sendPostToN8N(blogPostData);
          console.log("Webhook response received:", responseText);
          
          // Process the response from N8N and save to database
          const savedBlogPost = await processAndSaveWebhookResponse(
            responseText, 
            formData.title,
            slug
          );
          
          console.log("Blog post saved to database:", savedBlogPost);
          
          // Set progress to 100% before redirecting
          setProgress(100);
          clearInterval(progressInterval);
          
          toast.success("Blog post has been generated and saved as a draft");
          
          // Add to persistent notifications
          persistentToast.addToast({
            type: "success",
            title: "Blog Post Created Successfully",
            message: `${formData.title} has been saved as a draft`,
          });
          
          // Wait a moment to show the completed progress
          setTimeout(() => {
            // Trigger an event to refresh the blog list
            window.dispatchEvent(new CustomEvent('blogPostUpdated'));
            navigate("/admin/blog");
          }, 1000);
          
        } catch (error) {
          console.error("Error generating blog post:", error);
          const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
          setError(errorMessage);
          toast.error("Failed to create blog post");
          
          // Add to persistent notifications
          persistentToast.addToast({
            type: "error",
            title: "Failed to Create Blog Post",
            message: errorMessage,
          });
          
          clearInterval(progressInterval);
          setProgress(0);
        } finally {
          setIsLoading(false);
        }
      }
    };

    window.addEventListener('message', handleFormSubmission);
    
    return () => {
      window.removeEventListener('message', handleFormSubmission);
    };
  }, [navigate, persistentToast, webhookUrl]);

  return (
    <AdminBaseLayout title="AI Blog Generator">
      <div className="container mx-auto px-0 md:px-4 py-2 md:py-6 max-w-4xl">
        <Card className="border border-gray-200 shadow-sm bg-white">
          <CardHeader className="pb-2 md:pb-4">
            <CardTitle className="text-lg md:text-xl">Create AI-Generated Blog Post</CardTitle>
            <CardDescription>
              Fill out the form below to generate a complete blog post automatically using AI.
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-4 md:space-y-6">
            {/* Embedded Form */}
            <div className="w-full">
              <iframe
                src="https://automatizalo-n8n.v4zcph.easypanel.host/form/53adc78b-4ee7-4fa6-a657-c922847e965a"
                width="100%"
                height="600"
                frameBorder="0"
                style={{ border: 'none', borderRadius: '8px' }}
                title="AI Blog Generation Form"
                className="w-full"
              />
            </div>
            
            <div className="text-xs md:text-sm text-gray-500 bg-gray-50 p-3 rounded-md">
              Using webhook: {webhookUrl || "Default webhook URL"}
            </div>
            
            {isLoading && (
              <div className="space-y-2">
                <p className="text-sm text-gray-600">Generating blog post draft...</p>
                <Progress value={progress} className="h-2" />
              </div>
            )}
            
            {error && (
              <div className="p-3 bg-red-50 border border-red-200 rounded-md text-red-600 text-sm">
                <p className="font-medium mb-1">Error:</p>
                <p>{error}</p>
              </div>
            )}
          </CardContent>
          
          <CardFooter className="flex flex-col md:flex-row justify-end md:space-x-4 border-t border-gray-100 pt-4 space-y-2 md:space-y-0">
            <Button
              type="button"
              variant="outline"
              onClick={() => navigate("/admin/blog")}
              disabled={isLoading}
              className="w-full md:w-auto transition-all duration-200"
            >
              Back to Blog Admin
            </Button>
          </CardFooter>
        </Card>
      </div>
    </AdminBaseLayout>
  );
};

export default AutomaticBlog;
